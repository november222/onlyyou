import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Switch,
  Alert,
  ScrollView,
  Modal,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useEffect } from 'react';
import { Bell, Moon, Shield, Trash2, Download, Upload, Info, Heart, ChevronRight, User, LogOut, UserX, TriangleAlert as AlertTriangle, Globe, X, Check } from 'lucide-react-native';
import AuthService, { AuthState } from '@/services/AuthService';
import { router } from 'expo-router';

export default function SettingsScreen() {
  const [notifications, setNotifications] = useState(true);
  const [darkMode, setDarkMode] = useState(true);
  const [readReceipts, setReadReceipts] = useState(true);
  const [autoBackup, setAutoBackup] = useState(true);
  const [selectedLanguage, setSelectedLanguage] = useState('vi');
  const [showLanguageModal, setShowLanguageModal] = useState(false);
  const [authState, setAuthState] = useState<AuthState>(AuthService.getAuthState());

  useEffect(() => {
    // Listen for auth state changes
    AuthService.onAuthStateChange = (state) => {
      setAuthState(state);
    };

    return () => {
      AuthService.onAuthStateChange = null;
    };
  }, []);

  const languages = [
    { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
  ];

  const handleLanguageChange = (languageCode: string) => {
    setSelectedLanguage(languageCode);
    setShowLanguageModal(false);
    const selectedLang = languages.find(lang => lang.code === languageCode);
    Alert.alert(
      'Ng√¥n ng·ªØ ƒë√£ thay ƒë·ªïi',
      `ƒê√£ chuy·ªÉn sang ${selectedLang?.name}. ·ª®ng d·ª•ng s·∫Ω kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi.`,
      [{ text: 'OK' }]
    );
  };

  const handleClearMessages = () => {
    Alert.alert(
      'Clear All Messages?',
      'This will permanently delete all your messages. This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Clear All',
          style: 'destructive',
          onPress: () => Alert.alert('Messages Cleared', 'All messages have been deleted.'),
        },
      ]
    );
  };

  const handleExportMessages = () => {
    Alert.alert('Export Messages', 'Your messages have been exported to your device.');
  };

  const handleBackupMessages = () => {
    Alert.alert('Backup Created', 'Your messages have been backed up securely.');
  };

  const handleSignOut = () => {
    Alert.alert(
      'ƒêƒÉng Xu·∫•t',
      'B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh·ªèi ·ª©ng d·ª•ng?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'ƒêƒÉng Xu·∫•t',
          style: 'destructive',
          onPress: async () => {
            try {
              await AuthService.signOut();
              router.replace('/auth/login');
            } catch (error) {
              Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i.');
            }
          },
        },
      ]
    );
  };

  const handleDeleteAccount = () => {
    Alert.alert(
      'X√≥a T√†i Kho·∫£n Vƒ©nh Vi·ªÖn?',
      'H√†nh ƒë·ªông n√†y s·∫Ω x√≥a ho√†n to√†n t√†i kho·∫£n c·ªßa b·∫°n v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan. B·∫°n s·∫Ω kh√¥ng th·ªÉ kh√¥i ph·ª•c l·∫°i.',
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'Ti·∫øp T·ª•c',
          style: 'destructive',
          onPress: () => {
            // Second confirmation
            Alert.alert(
              'X√°c Nh·∫≠n Cu·ªëi C√πng',
              'B·∫°n c√≥ TH·ª∞C S·ª∞ mu·ªën x√≥a t√†i kho·∫£n vƒ©nh vi·ªÖn? H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ ho√†n t√°c.',
              [
                { text: 'H·ªßy', style: 'cancel' },
                {
                  text: 'X√≥a Vƒ©nh Vi·ªÖn',
                  style: 'destructive',
                  onPress: async () => {
                    try {
                      // Mock account deletion
                      await new Promise(resolve => setTimeout(resolve, 2000));
                      
                      Alert.alert(
                        'T√†i Kho·∫£n ƒê√£ ƒê∆∞·ª£c X√≥a',
                        'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a vƒ©nh vi·ªÖn. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Only You.',
                        [
                          {
                            text: 'OK',
                            onPress: () => {
                              AuthService.signOut();
                              router.replace('/auth/login');
                            },
                          },
                        ]
                      );
                    } catch (error) {
                      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.');
                    }
                  },
                },
              ]
            );
          },
        },
      ]
    );
  };
  const SettingItem = ({ 
    icon, 
    title, 
    subtitle, 
    onPress, 
    rightElement, 
    showChevron = false 
  }: {
    icon: React.ReactNode;
    title: string;
    subtitle?: string;
    onPress?: () => void;
    rightElement?: React.ReactNode;
    showChevron?: boolean;
  }) => (
    <TouchableOpacity style={styles.settingItem} onPress={onPress}>
      <View style={styles.settingLeft}>
        <View style={styles.settingIcon}>
          {icon}
        </View>
        <View style={styles.settingText}>
          <Text style={styles.settingTitle}>{title}</Text>
          {subtitle && <Text style={styles.settingSubtitle}>{subtitle}</Text>}
        </View>
      </View>
      <View style={styles.settingRight}>
        {rightElement}
        {showChevron && <ChevronRight size={20} color="#666" strokeWidth={2} />}
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <Heart size={24} color="#ff6b9d" strokeWidth={2} fill="#ff6b9d" />
          <Text style={styles.title}>Settings</Text>
        </View>

        {/* Account Section */}
        {authState.user && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>T√†i Kho·∫£n</Text>
            <View style={styles.sectionContent}>
              <SettingItem
                icon={<User size={20} color="#ff6b9d" strokeWidth={2} />}
                title={authState.user.name}
                subtitle={`${authState.user.email} ‚Ä¢ ƒêƒÉng nh·∫≠p qua ${authState.user.provider === 'google' ? 'Google' : 'Apple'}`}
              />
              <SettingItem
                icon={<LogOut size={20} color="#ef4444" strokeWidth={2} />}
                title="ƒêƒÉng Xu·∫•t"
                subtitle="ƒêƒÉng xu·∫•t kh·ªèi ·ª©ng d·ª•ng"
                onPress={handleSignOut}
                showChevron
              />
            </View>
          </View>
        )}

        {/* Notifications Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Notifications</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<Bell size={20} color="#ff6b9d" strokeWidth={2} />}
              title="Push Notifications"
              subtitle="Get notified when your partner sends a message"
              rightElement={
                <Switch
                  value={notifications}
                  onValueChange={setNotifications}
                  trackColor={{ false: '#333', true: '#ff6b9d' }}
                  thumbColor="#fff"
                />
              }
            />
          </View>
        </View>

        {/* Appearance Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Giao Di·ªán</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<Globe size={20} color="#ff6b9d" strokeWidth={2} />}
              title="Ng√¥n ng·ªØ"
              subtitle={languages.find(lang => lang.code === selectedLanguage)?.name || 'Ti·∫øng Vi·ªát'}
              onPress={() => setShowLanguageModal(true)}
              showChevron
            />
            <SettingItem
              icon={<Moon size={20} color="#ff6b9d" strokeWidth={2} />}
              title="Ch·∫ø ƒë·ªô t·ªëi"
              subtitle="S·ª≠ d·ª•ng giao di·ªán t·ªëi ƒë·ªÉ b·∫£o v·ªá m·∫Øt"
              rightElement={
                <Switch
                  value={darkMode}
                  onValueChange={setDarkMode}
                  trackColor={{ false: '#333', true: '#ff6b9d' }}
                  thumbColor="#fff"
                />
              }
            />
          </View>
        </View>

        {/* Privacy Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Ri√™ng T∆∞ & B·∫£o M·∫≠t</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<Shield size={20} color="#ff6b9d" strokeWidth={2} />}
              title="X√°c nh·∫≠n ƒë√£ ƒë·ªçc"
              subtitle="Cho ƒë·ªëi t√°c bi·∫øt khi b·∫°n ƒë√£ ƒë·ªçc tin nh·∫Øn"
              rightElement={
                <Switch
                  value={readReceipts}
                  onValueChange={setReadReceipts}
                  trackColor={{ false: '#333', true: '#ff6b9d' }}
                  thumbColor="#fff"
                />
              }
            />
          </View>
        </View>

        {/* Data Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>D·ªØ Li·ªáu & L∆∞u Tr·ªØ</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<Upload size={20} color="#ff6b9d" strokeWidth={2} />}
              title="Sao l∆∞u t·ª± ƒë·ªông"
              subtitle="T·ª± ƒë·ªông sao l∆∞u tin nh·∫Øn c·ªßa b·∫°n"
              rightElement={
                <Switch
                  value={autoBackup}
                  onValueChange={setAutoBackup}
                  trackColor={{ false: '#333', true: '#ff6b9d' }}
                  thumbColor="#fff"
                />
              }
            />
            <SettingItem
              icon={<Download size={20} color="#4ade80" strokeWidth={2} />}
              title="Xu·∫•t tin nh·∫Øn"
              subtitle="T·∫£i xu·ªëng l·ªãch s·ª≠ tr√≤ chuy·ªán"
              onPress={handleExportMessages}
              showChevron
            />
            <SettingItem
              icon={<Upload size={20} color="#3b82f6" strokeWidth={2} />}
              title="T·∫°o b·∫£n sao l∆∞u"
              subtitle="Sao l∆∞u tin nh·∫Øn th·ªß c√¥ng"
              onPress={handleBackupMessages}
              showChevron
            />
            <SettingItem
              icon={<Trash2 size={20} color="#ef4444" strokeWidth={2} />}
              title="X√≥a t·∫•t c·∫£ tin nh·∫Øn"
              subtitle="X√≥a vƒ©nh vi·ªÖn t·∫•t c·∫£ tin nh·∫Øn"
              onPress={handleClearMessages}
              showChevron
            />
          </View>
        </View>

        {/* Account Management Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Qu·∫£n L√Ω T√†i Kho·∫£n</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<UserX size={20} color="#ef4444" strokeWidth={2} />}
              title="X√≥a T√†i Kho·∫£n Vƒ©nh Vi·ªÖn"
              subtitle="X√≥a ho√†n to√†n t√†i kho·∫£n v√† t·∫•t c·∫£ d·ªØ li·ªáu"
              onPress={handleDeleteAccount}
              showChevron
            />
          </View>
        </View>

        {/* About Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Th√¥ng Tin</Text>
          <View style={styles.sectionContent}>
            <SettingItem
              icon={<Info size={20} color="#ff6b9d" strokeWidth={2} />}
              title="V·ªÅ Only You"
              subtitle="Phi√™n b·∫£n 1.0.0 ‚Ä¢ ƒê∆∞·ª£c t·∫°o v·ªõi ‚ù§Ô∏è"
              showChevron
            />
          </View>
        </View>

        {/* Footer */}
        <View style={styles.footer}>
          <Text style={styles.footerText}>
            Only You ƒë∆∞·ª£c thi·∫øt k·∫ø cho hai ng∆∞·ªùi mu·ªën c√≥ s·ª± ri√™ng t∆∞ ho√†n to√†n trong giao ti·∫øp.
            Tin nh·∫Øn c·ªßa b·∫°n ƒë∆∞·ª£c m√£ h√≥a v√† ch·ªâ l∆∞u tr·ªØ tr√™n thi·∫øt b·ªã c·ªßa b·∫°n.
          </Text>
        </View>
      </ScrollView>

      {/* Language Selection Modal */}
      <Modal
        visible={showLanguageModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowLanguageModal(false)}
      >
        <View style={styles.languageModal}>
          <View style={styles.languageHeader}>
            <Text style={styles.languageTitle}>Ch·ªçn Ng√¥n Ng·ªØ</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setShowLanguageModal(false)}
            >
              <X size={24} color="#888" strokeWidth={2} />
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.languageList}>
            {languages.map((language) => (
              <TouchableOpacity
                key={language.code}
                style={styles.languageItem}
                onPress={() => handleLanguageChange(language.code)}
              >
                <View style={styles.languageLeft}>
                  <Text style={styles.languageFlag}>{language.flag}</Text>
                  <Text style={styles.languageName}>{language.name}</Text>
                </View>
                {selectedLanguage === language.code && (
                  <Check size={20} color="#ff6b9d" strokeWidth={2} />
                )}
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  content: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: '#fff',
    marginLeft: 12,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#888',
    marginBottom: 8,
    marginHorizontal: 20,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  sectionContent: {
    backgroundColor: '#111',
    marginHorizontal: 20,
    borderRadius: 12,
    overflow: 'hidden',
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#222',
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingIcon: {
    width: 32,
    height: 32,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  settingText: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: '#fff',
    marginBottom: 2,
  },
  settingSubtitle: {
    fontSize: 14,
    color: '#888',
    lineHeight: 18,
  },
  settingRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  footer: {
    padding: 20,
    paddingTop: 10,
    paddingBottom: 40,
  },
  footerText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    lineHeight: 20,
  },
  languageModal: {
    flex: 1,
    backgroundColor: '#000',
  },
  languageHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  languageTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#fff',
  },
  closeButton: {
    padding: 8,
  },
  languageList: {
    flex: 1,
    padding: 20,
  },
  languageItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#111',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#333',
  },
  languageLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  languageFlag: {
    fontSize: 24,
    marginRight: 12,
  },
  languageName: {
    fontSize: 16,
    color: '#fff',
    fontWeight: '500',
  },
});